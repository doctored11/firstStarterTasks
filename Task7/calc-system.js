
{
  let x = prompt("—á–∏—Å–ª–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π?", '');
  let n = prompt("–Ω–æ–≤–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ?", '');

  if (n < 2){ 
    alert("ü§¨");
    alert("–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –¥–ª—è —É–º–Ω—ã—Ö, –ø–µ—Ä–µ–≤–µ–¥–∏ —Å–∞–º —á–∏—Å–ª–æ " + x + " –∏–∑ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π, –≤ —Å–∏—Å—Ç–µ–º—É —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º " + n + " ü§° " );
  } else
  if (n >16) {
    alert("–º—ã —Ç—É—Ç –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –¥–æ 16—Ä–∏—á–Ω–æ–π( –º–Ω–µ –ª–µ–Ω—å –ø–∏—Å–∞—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç –≤–µ—Å—å ) ");
  } else {
    alert( calcNumber(x, n) );
  }


  function calcNumber(x, n) {
    let newNum = [];
    let number;
    let result;

    number = x;

    while (number != 0) {

    result = number % n
    number = calcWhole(number,n);
    if ( result > 9) {
      result = translateToADC(result);
    }
    
    newNum.unshift(result);

    }

    return (newNum.join(""));

    
  }
//   

  function calcWhole(val, by){
    return (val - val % by) / by;
}

 function translateToADC(num){

  switch (num) {
    case 10: num = 'A' ;
    break;
    case 11: num = 'B' ;
    break;
    case 12: num = 'C' ;
    break;
    case 13: num = 'D' ;
    break;
    case 14: num = 'E' ;
    break;
    case 15: num = 'F' ;
    break;
    case 16: num = 'Güò°' ;
    break;
  }
   return(num);

 }
}